{"remainingRequest":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js!/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/src/components/NotificationPlugin/Notification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/src/components/NotificationPlugin/Notification.vue","mtime":1607335909000},{"path":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/babel.config.js","mtime":1607335909000},{"path":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/viettran/Desktop/bootstrap-vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'notification',\n  components: {\n    contentRender: {\n      props: ['component'],\n      render: function render(createElement) {\n        return createElement(this.component);\n      }\n    }\n  },\n  props: {\n    message: String,\n    title: {\n      type: String,\n      description: 'Notification title'\n    },\n    icon: {\n      type: String,\n      description: 'Notification icon'\n    },\n    verticalAlign: {\n      type: String,\n      default: 'top',\n      validator: function validator(value) {\n        var acceptedValues = ['top', 'bottom'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Vertical alignment of notification (top|bottom)'\n    },\n    horizontalAlign: {\n      type: String,\n      default: 'right',\n      validator: function validator(value) {\n        var acceptedValues = ['left', 'center', 'right'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Horizontal alignment of notification (left|center|right)'\n    },\n    type: {\n      type: String,\n      default: 'info',\n      validator: function validator(value) {\n        var acceptedValues = ['default', 'info', 'primary', 'danger', 'warning', 'success'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Notification type of notification (default|info|primary|danger|warning|success)'\n    },\n    timeout: {\n      type: Number,\n      default: 5000,\n      validator: function validator(value) {\n        return value >= 0;\n      },\n      description: 'Notification timeout (closes after X milliseconds). Default is 5000 (5s)'\n    },\n    timestamp: {\n      type: Date,\n      default: function _default() {\n        return new Date();\n      },\n      description: 'Notification timestamp (used internally to handle notification removal correctly)'\n    },\n    component: {\n      type: [Object, Function],\n      description: 'Custom content component. Cane be a `.vue` component or render function'\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n      description: 'Whether to show close button'\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true,\n      description: 'Whether to close notification when clicking it\\' body'\n    },\n    clickHandler: {\n      type: Function,\n      description: 'Custom notification click handler'\n    }\n  },\n  data: function data() {\n    return {\n      elmHeight: 0\n    };\n  },\n  computed: {\n    hasIcon: function hasIcon() {\n      return this.icon && this.icon.length > 0;\n    },\n    alertType: function alertType() {\n      return \"alert-\".concat(this.type);\n    },\n    customPosition: function customPosition() {\n      var _this = this;\n\n      var initialMargin = 20;\n      var alertHeight = this.elmHeight + 10;\n      var sameAlertsCount = this.$notifications.state.filter(function (alert) {\n        return alert.horizontalAlign === _this.horizontalAlign && alert.verticalAlign === _this.verticalAlign && alert.timestamp <= _this.timestamp;\n      }).length;\n\n      if (this.$notifications.settings.overlap) {\n        sameAlertsCount = 1;\n      }\n\n      var pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\n      var styles = {};\n\n      if (this.verticalAlign === 'top') {\n        styles.top = \"\".concat(pixels, \"px\");\n      } else {\n        styles.bottom = \"\".concat(pixels, \"px\");\n      }\n\n      return styles;\n    }\n  },\n  methods: {\n    close: function close() {\n      this.$emit('close', this.timestamp);\n    },\n    tryClose: function tryClose(evt) {\n      if (this.clickHandler) {\n        this.clickHandler(evt, this);\n      }\n\n      if (this.closeOnClick) {\n        this.close();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.elmHeight = this.$el.clientHeight;\n\n    if (this.timeout) {\n      setTimeout(this.close, this.timeout);\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACAA,sBADA;AAEAC;AACAC;AACAC,0BADA;AAEAC;AACA;AACA;AAJA;AADA,GAFA;AAUAD;AACAE,mBADA;AAEAC;AACAC,kBADA;AAEAC;AAFA,KAFA;AAMAC;AACAF,kBADA;AAEAC;AAFA,KANA;AAUAE;AACAH,kBADA;AAEAI,oBAFA;AAGAC;AACA;AACA;AACA,OANA;AAOAJ;AAPA,KAVA;AAmBAK;AACAN,kBADA;AAEAI,sBAFA;AAGAC;AACA;AACA;AACA,OANA;AAOAJ;AAPA,KAnBA;AA4BAD;AACAA,kBADA;AAEAI,qBAFA;AAGAC;AACA,8BACA,SADA,EAEA,MAFA,EAGA,SAHA,EAIA,QAJA,EAKA,SALA,EAMA,SANA;AAQA;AACA,OAbA;AAcAJ;AAdA,KA5BA;AA4CAM;AACAP,kBADA;AAEAI,mBAFA;AAGAC;AACA;AACA,OALA;AAMAJ;AANA,KA5CA;AAoDAO;AACAR,gBADA;AAEAI;AAAA;AAAA,OAFA;AAGAH;AAHA,KApDA;AAyDAQ;AACAT,8BADA;AAEAC;AAFA,KAzDA;AA6DAS;AACAV,mBADA;AAEAI,mBAFA;AAGAH;AAHA,KA7DA;AAkEAU;AACAX,mBADA;AAEAI,mBAFA;AAGAH;AAHA,KAlEA;AAuEAW;AACAZ,oBADA;AAEAC;AAFA;AAvEA,GAVA;AAsFAY,MAtFA,kBAsFA;AACA;AACAC;AADA;AAGA,GA1FA;AA2FAC;AACAC,WADA,qBACA;AACA;AACA,KAHA;AAIAC,aAJA,uBAIA;AACA;AACA,KANA;AAOAC,kBAPA,4BAOA;AAAA;;AACA;AACA;AACA;AACA,eACAC,mDACAA,2CADA,IAEAA,kCAHA;AAKA,OANA,EAMAC,MANA;;AAOA;AACAC;AACA;;AACA;AACA;;AACA;AACAC;AACA,OAFA,MAEA;AACAA;AACA;;AACA;AACA;AA5BA,GA3FA;AAyHAC;AACAC,SADA,mBACA;AACA;AACA,KAHA;AAIAC,YAJA,oBAIAC,GAJA,EAIA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAXA,GAzHA;AAsIAC,SAtIA,qBAsIA;AACA;;AACA;AACAC;AACA;AACA;AA3IA","names":["name","components","contentRender","props","render","message","title","type","description","icon","verticalAlign","default","validator","horizontalAlign","timeout","timestamp","component","showClose","closeOnClick","clickHandler","data","elmHeight","computed","hasIcon","alertType","customPosition","alert","length","sameAlertsCount","styles","methods","close","tryClose","evt","mounted","setTimeout"],"sourceRoot":"src/components/NotificationPlugin","sources":["Notification.vue"],"sourcesContent":["<template>\n  <div\n    @click=\"tryClose\"\n    data-notify=\"container\"\n    class=\"alert alert-notify alert-dismissible\"\n    :class=\"[\n      { 'alert-with-icon': icon },\n      verticalAlign,\n      horizontalAlign,\n      alertType\n    ]\"\n    role=\"alert\"\n    :style=\"customPosition\"\n    data-notify-position=\"top-center\"\n  >\n    <template v-if=\"icon || $slots.icon\">\n      <slot name=\"icon\">\n            <span class=\"alert-icon\" data-notify=\"icon\">\n              <i :class=\"icon\"></i>\n            </span>\n      </slot>\n    </template>\n\n    <span class=\"alert-text\">\n\n      <span v-if=\"title\" class=\"title\">\n        <b>{{ title }}<br/></b>\n      </span>\n      <span v-if=\"message\" v-html=\"message\"></span>\n      <content-render\n        v-if=\"!message && component\"\n        :component=\"component\"\n      ></content-render>\n    </span>\n\n    <slot name=\"dismiss-icon\">\n      <button type=\"button\"\n              class=\"close\"\n              data-dismiss=\"alert\"\n              aria-label=\"Close\"\n              @click=\"close\">\n        <span aria-hidden=\"true\">Ã—</span>\n      </button>\n    </slot>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'notification',\n    components: {\n      contentRender: {\n        props: ['component'],\n        render: function (createElement) {\n          return createElement(this.component)\n        }\n      }\n    },\n    props: {\n      message: String,\n      title: {\n        type: String,\n        description: 'Notification title'\n      },\n      icon: {\n        type: String,\n        description: 'Notification icon'\n      },\n      verticalAlign: {\n        type: String,\n        default: 'top',\n        validator: value => {\n          let acceptedValues = ['top', 'bottom'];\n          return acceptedValues.indexOf(value) !== -1;\n        },\n        description: 'Vertical alignment of notification (top|bottom)'\n      },\n      horizontalAlign: {\n        type: String,\n        default: 'right',\n        validator: value => {\n          let acceptedValues = ['left', 'center', 'right'];\n          return acceptedValues.indexOf(value) !== -1;\n        },\n        description: 'Horizontal alignment of notification (left|center|right)'\n      },\n      type: {\n        type: String,\n        default: 'info',\n        validator: value => {\n          let acceptedValues = [\n            'default',\n            'info',\n            'primary',\n            'danger',\n            'warning',\n            'success'\n          ];\n          return acceptedValues.indexOf(value) !== -1;\n        },\n        description: 'Notification type of notification (default|info|primary|danger|warning|success)'\n      },\n      timeout: {\n        type: Number,\n        default: 5000,\n        validator: value => {\n          return value >= 0;\n        },\n        description: 'Notification timeout (closes after X milliseconds). Default is 5000 (5s)'\n      },\n      timestamp: {\n        type: Date,\n        default: () => new Date(),\n        description: 'Notification timestamp (used internally to handle notification removal correctly)'\n      },\n      component: {\n        type: [Object, Function],\n        description: 'Custom content component. Cane be a `.vue` component or render function'\n      },\n      showClose: {\n        type: Boolean,\n        default: true,\n        description: 'Whether to show close button'\n      },\n      closeOnClick: {\n        type: Boolean,\n        default: true,\n        description: 'Whether to close notification when clicking it\\' body'\n      },\n      clickHandler: {\n        type: Function,\n        description: 'Custom notification click handler'\n      }\n    },\n    data() {\n      return {\n        elmHeight: 0\n      };\n    },\n    computed: {\n      hasIcon() {\n        return this.icon && this.icon.length > 0;\n      },\n      alertType() {\n        return `alert-${this.type}`;\n      },\n      customPosition() {\n        let initialMargin = 20;\n        let alertHeight = this.elmHeight + 10;\n        let sameAlertsCount = this.$notifications.state.filter(alert => {\n          return (\n            alert.horizontalAlign === this.horizontalAlign &&\n            alert.verticalAlign === this.verticalAlign &&\n            alert.timestamp <= this.timestamp\n          );\n        }).length;\n        if (this.$notifications.settings.overlap) {\n          sameAlertsCount = 1;\n        }\n        let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\n        let styles = {};\n        if (this.verticalAlign === 'top') {\n          styles.top = `${pixels}px`;\n        } else {\n          styles.bottom = `${pixels}px`;\n        }\n        return styles;\n      }\n    },\n    methods: {\n      close() {\n        this.$emit('close', this.timestamp);\n      },\n      tryClose(evt) {\n        if (this.clickHandler) {\n          this.clickHandler(evt, this);\n        }\n        if (this.closeOnClick) {\n          this.close();\n        }\n      }\n    },\n    mounted() {\n      this.elmHeight = this.$el.clientHeight;\n      if (this.timeout) {\n        setTimeout(this.close, this.timeout);\n      }\n    }\n  };\n</script>\n<style lang=\"scss\">\n  .notifications .alert {\n    position: fixed;\n    z-index: 10000;\n\n    &[data-notify='container'] {\n      max-width: 500px;\n    }\n\n    &.center {\n      margin: 0 auto;\n    }\n    &.left {\n      left: 20px;\n    }\n    &.right {\n      right: 20px;\n    }\n  }\n</style>\n"]}]}